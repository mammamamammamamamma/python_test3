{"name": "test_logn", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nfrom no such window\n  (Session info: chrome=112.0.5615.140)\nStacktrace:\nBacktrace:\n\tGetHandleVerifier [0x011CDCE3+50899]\n\t(No symbol) [0x0115E111]\n\t(No symbol) [0x01065450]\n\t(No symbol) [0x0105879A]\n\t(No symbol) [0x01057118]\n\t(No symbol) [0x0105778A]\n\t(No symbol) [0x01060B74]\n\t(No symbol) [0x0106AB28]\n\t(No symbol) [0x0106D4D6]\n\t(No symbol) [0x01057AE3]\n\t(No symbol) [0x0106A835]\n\t(No symbol) [0x010BE219]\n\t(No symbol) [0x010AB6F6]\n\t(No symbol) [0x01087708]\n\t(No symbol) [0x0108886D]\n\tGetHandleVerifier [0x01433EAE+2566302]\n\tGetHandleVerifier [0x014692B1+2784417]\n\tGetHandleVerifier [0x0146327C+2759788]\n\tGetHandleVerifier [0x01265740+672048]\n\t(No symbol) [0x01168872]\n\t(No symbol) [0x011641C8]\n\t(No symbol) [0x011642AB]\n\t(No symbol) [0x011571B7]\n\tBaseThreadInitThunk [0x753A7D69+25]\n\tRtlInitializeExceptionChain [0x7753B74B+107]\n\tRtlClearBits [0x7753B6CF+191]", "trace": "self = <testWB.TestLogn object at 0x0000022A3487AB90>\n\n    def test_logn(self):\n        driver = self.driver\n        # 点击登录按钮\n        driver.find_element(By.XPATH, '//*[@id=\"__sidebar\"]/div/div[2]/div[1]/div/button').click()\n        sleep(1)\n        # 截屏（使用时间戳命名）\n        driver.get_screenshot_as_file(f'./img/新浪微博{time.strftime(\"%Y_%m_%d %H_%M_%S\")}.png')\n        sleep(1)\n        # 点击账号登录\n        driver.find_element(By.XPATH, '//*[@id=\"app\"]/div[5]/div[1]/div/div[2]/div/div/div[5]/a[1]').click()\n        # 切换窗口\n        # #获取当前浏览器的所有窗口句柄\n        handles = driver.window_handles\n        # 切换到最新打开的窗口\n        driver.switch_to.window(handles[-1])\n        # 定位账号输入框\n        uname = driver.find_element(By.XPATH, '//*[@id=\"loginname\"]')\n        uname.clear()\n        uname.send_keys('13267872396')\n        sleep(1)\n        # 定位密码框\n        password = driver.find_element(By.XPATH, '//*[@id=\"pl_login_form\"]/div/div[3]/div[2]/div/input')\n        password.clear()\n        password.send_keys('Ma13267872396')\n        # 截屏（使用时间戳命名）\n        driver.get_screenshot_as_file(f'./img/新浪微博{time.strftime(\"%Y_%m_%d %H_%M_%S\")}.png')\n        sleep(1)\n        # 点击登录按钮\n        driver.find_element(By.XPATH, '//*[@id=\"pl_login_form\"]/div/div[3]/div[6]/a').click()\n        sleep(1)\n        # 截屏（使用时间戳命名）\n>       driver.get_screenshot_as_file(f'./img/新浪微博{time.strftime(\"%Y_%m_%d %H_%M_%S\")}.png')\n\ntestWB.py:68: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nC:\\python\\python3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:892: in get_screenshot_as_file\n    png = self.get_screenshot_as_png()\nC:\\python\\python3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:926: in get_screenshot_as_png\n    return b64decode(self.get_screenshot_as_base64().encode(\"ascii\"))\nC:\\python\\python3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:937: in get_screenshot_as_base64\n    return self.execute(Command.SCREENSHOT)[\"value\"]\nC:\\python\\python3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:440: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x0000022A34879C30>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"unknown error\",\"message\":\"unknown error: cannot determine loading status\\...dInitThunk [0x753A7D69+25]\\\\n\\\\tRtlInitializeExceptionChain [0x7753B74B+107]\\\\n\\\\tRtlClearBits [0x7753B6CF+191]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value.keys()) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        if status in ErrorCode.NO_SUCH_ELEMENT:\n            exception_class = NoSuchElementException\n        elif status in ErrorCode.NO_SUCH_FRAME:\n            exception_class = NoSuchFrameException\n        elif status in ErrorCode.NO_SUCH_SHADOW_ROOT:\n            exception_class = NoSuchShadowRootException\n        elif status in ErrorCode.NO_SUCH_WINDOW:\n            exception_class = NoSuchWindowException\n        elif status in ErrorCode.STALE_ELEMENT_REFERENCE:\n            exception_class = StaleElementReferenceException\n        elif status in ErrorCode.ELEMENT_NOT_VISIBLE:\n            exception_class = ElementNotVisibleException\n        elif status in ErrorCode.INVALID_ELEMENT_STATE:\n            exception_class = InvalidElementStateException\n        elif (\n            status in ErrorCode.INVALID_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR\n            or status in ErrorCode.INVALID_XPATH_SELECTOR_RETURN_TYPER\n        ):\n            exception_class = InvalidSelectorException\n        elif status in ErrorCode.ELEMENT_IS_NOT_SELECTABLE:\n            exception_class = ElementNotSelectableException\n        elif status in ErrorCode.ELEMENT_NOT_INTERACTABLE:\n            exception_class = ElementNotInteractableException\n        elif status in ErrorCode.INVALID_COOKIE_DOMAIN:\n            exception_class = InvalidCookieDomainException\n        elif status in ErrorCode.UNABLE_TO_SET_COOKIE:\n            exception_class = UnableToSetCookieException\n        elif status in ErrorCode.TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.SCRIPT_TIMEOUT:\n            exception_class = TimeoutException\n        elif status in ErrorCode.UNKNOWN_ERROR:\n            exception_class = WebDriverException\n        elif status in ErrorCode.UNEXPECTED_ALERT_OPEN:\n            exception_class = UnexpectedAlertPresentException\n        elif status in ErrorCode.NO_ALERT_OPEN:\n            exception_class = NoAlertPresentException\n        elif status in ErrorCode.IME_NOT_AVAILABLE:\n            exception_class = ImeNotAvailableException\n        elif status in ErrorCode.IME_ENGINE_ACTIVATION_FAILED:\n            exception_class = ImeActivationFailedException\n        elif status in ErrorCode.MOVE_TARGET_OUT_OF_BOUNDS:\n            exception_class = MoveTargetOutOfBoundsException\n        elif status in ErrorCode.JAVASCRIPT_ERROR:\n            exception_class = JavascriptException\n        elif status in ErrorCode.SESSION_NOT_CREATED:\n            exception_class = SessionNotCreatedException\n        elif status in ErrorCode.INVALID_ARGUMENT:\n            exception_class = InvalidArgumentException\n        elif status in ErrorCode.NO_SUCH_COOKIE:\n            exception_class = NoSuchCookieException\n        elif status in ErrorCode.UNABLE_TO_CAPTURE_SCREEN:\n            exception_class = ScreenshotException\n        elif status in ErrorCode.ELEMENT_CLICK_INTERCEPTED:\n            exception_class = ElementClickInterceptedException\n        elif status in ErrorCode.INSECURE_CERTIFICATE:\n            exception_class = InsecureCertificateException\n        elif status in ErrorCode.INVALID_COORDINATES:\n            exception_class = InvalidCoordinatesException\n        elif status in ErrorCode.INVALID_SESSION_ID:\n            exception_class = InvalidSessionIdException\n        elif status in ErrorCode.UNKNOWN_METHOD:\n            exception_class = UnknownMethodException\n        else:\n            exception_class = WebDriverException\n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: unknown error: cannot determine loading status\nE       from no such window\nE         (Session info: chrome=112.0.5615.140)\nE       Stacktrace:\nE       Backtrace:\nE       \tGetHandleVerifier [0x011CDCE3+50899]\nE       \t(No symbol) [0x0115E111]\nE       \t(No symbol) [0x01065450]\nE       \t(No symbol) [0x0105879A]\nE       \t(No symbol) [0x01057118]\nE       \t(No symbol) [0x0105778A]\nE       \t(No symbol) [0x01060B74]\nE       \t(No symbol) [0x0106AB28]\nE       \t(No symbol) [0x0106D4D6]\nE       \t(No symbol) [0x01057AE3]\nE       \t(No symbol) [0x0106A835]\nE       \t(No symbol) [0x010BE219]\nE       \t(No symbol) [0x010AB6F6]\nE       \t(No symbol) [0x01087708]\nE       \t(No symbol) [0x0108886D]\nE       \tGetHandleVerifier [0x01433EAE+2566302]\nE       \tGetHandleVerifier [0x014692B1+2784417]\nE       \tGetHandleVerifier [0x0146327C+2759788]\nE       \tGetHandleVerifier [0x01265740+672048]\nE       \t(No symbol) [0x01168872]\nE       \t(No symbol) [0x011641C8]\nE       \t(No symbol) [0x011642AB]\nE       \t(No symbol) [0x011571B7]\nE       \tBaseThreadInitThunk [0x753A7D69+25]\nE       \tRtlInitializeExceptionChain [0x7753B74B+107]\nE       \tRtlClearBits [0x7753B6CF+191]\n\nC:\\python\\python3.10\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:245: WebDriverException"}, "start": 1683880705935, "stop": 1683880718709, "uuid": "d11763cd-9d4d-44bf-9733-ea9274b788db", "historyId": "3157a3037099b7a8d7679e2f81efdb3f", "testCaseId": "3157a3037099b7a8d7679e2f81efdb3f", "fullName": "testWB.TestLogn#test_logn", "labels": [{"name": "suite", "value": "testWB"}, {"name": "subSuite", "value": "TestLogn"}, {"name": "host", "value": "XiaoXin16"}, {"name": "thread", "value": "21676-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "testWB"}]}